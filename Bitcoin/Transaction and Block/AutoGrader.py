import base64

Secret = """
"""
If you see this line, you are violating rule for this course since you are decrypting Autograder's Code.
The code is obfuscated, STOP CHEATING !!!
"""
import datetime #line:8
import util #line:9
from Transaction import *#line:10
from Ledger import *#line:11
from Block import *#line:12
from RSA_func import generateMyKeys #line:13
from MerkelTree import MerkelTree #line:14
class AutoGrader :#line:16
    def __init__ (OOOO00O000O0OOO0O ):#line:17
        OOOO00O000O0OOO0O .version ="1.3.0"#line:18
    @staticmethod #line:20
    def getKeys ():#line:21
        OO0000O00O0OO0000 ,OO0OOO00OOO000000 ,O0OO00O0OO000O000 =generateMyKeys ()#line:22
        return [(OO0000O00O0OO0000 ,O0OO00O0OO000O000 ),(OO0OOO00OOO000000 ,O0OO00O0OO000O000 )]#line:23
    def run (O00OOO00000O0O0OO ):#line:25
        print ("Autograder Start @ {}\nV {} By Mark \nIf you have any problem with Autograder, " "ask on the WeChat group directly\n--------------------------".format (datetime .datetime .now (),O00OOO00000O0O0OO .version ))#line:27
        print ("Setting Test Environment ...",end ="",flush =False )#line:28
        O0O0O0OOO0000OO00 =0 #line:30
        O0OO0O0OOO0000000 ="\033[1;32m[Pass]  |"#line:34
        OOOOOOO000OO0OO00 ="\033[1;31m[Fatal] |"#line:35
        O00OO00OO000O0000 ="\033[1;33m[Warn]  |"#line:36
        O0OO00000O0OOOO0O ="\033[1;34m[Info]  |"#line:37
        print ("\rTest Case 1. Create Ledger and RSA_keys to setup test environment")#line:39
        try :#line:40
            OO00O0O0O00OOOO0O =Ledger ()#line:41
            print (O0OO0O0OOO0000000 +"\033[0;;m Ledger is created.")#line:42
        except Exception as OOOOO00OOO00OO0O0 :#line:43
            print (OOOOOOO000OO0OO00 +"\033[0;;m We failed to create a Ledger Object. \nAutograder Terminated.")#line:44
            raise OOOOO00OOO00OO0O0 #line:45
        O00OO0OO0OOO0O00O =["A","B","C","D","E"]#line:47
        try :#line:48
            OO00OOO0O00O0OOOO ={O00O00OOO0OOOO0O0 :O00OOO00000O0O0OO .getKeys ()for O00O00OOO0OOOO0O0 in O00OO0OO0OOO0O00O }#line:49
            print (O0OO0O0OOO0000000 +"\033[0;;m RSA Keys Created.")#line:50
        except Exception as OOOOO00OOO00OO0O0 :#line:51
            print (OOOOOOO000OO0OO00 +"\033[0;;m We failed to create RSA Keys. Do NOT modify the given RSA_func.py file. " "Autograder Terminated.\n" "Detailed Exception Showed Above.")#line:54
            raise OOOOO00OOO00OO0O0 #line:55
        try :#line:57
            O0O0OO0O0O0O00O0O =OO00O0O0O00OOOO0O .getBalanceStat ()#line:58
            assert str (type (O0O0OO0O0O0O00O0O ))=="<class 'dict'>"#line:59
            print (O0OO0O0OOO0000000 +"\033[0;;m Ledger.getBalanceStat() Function returns a dictionary.")#line:60
        except AssertionError :#line:61
            O0O0O0OOO0000OO00 +=1 #line:62
            print (O00OO00OO000O0000 +"\033[0;;m Ledger.getBalanceStat() function does NOT return a dictionary, instead, it " "returns an object with type {}. Since we need this function for test cases below, " "the cases below may raise Exceptions due to this. \nAutograder will continue to run.".format (type (O0O0OO0O0O0O00O0O )))#line:65
        except Exception as OOOOO00OOO00OO0O0 :#line:66
            print (OOOOOOO000OO0OO00 +"\033[0;;m Exception raised when running Ledger.getBalanceStat function.\n" "Autograder Terminated.")#line:68
            raise OOOOO00OOO00OO0O0 #line:69
        try :#line:71
            print (O0OO00000O0OOOO0O +"\033[0;;m Testing Signature & Decryption Process ...",flush =True ,end ="")#line:72
            O0OO00000O000000O =Transaction (OO00O0O0O00OOOO0O ,50 ,(0 ,0 ),(0 ,0 ),OO00OOO0O00O0OOOO ["A"][1 ],isCoinBase =True )#line:73
            OO0OO0O0000O0O000 =signSignature (O0OO00000O000000O ,OO00OOO0O00O0OOOO ["A"][1 ])#line:74
            OOO0O00O00OOOO0O0 =decryptSignature (OO0OO0O0000O0O000 ,OO00OOO0O00O0OOOO ["A"][0 ])#line:75
            assert OOO0O00O00OOOO0O0 ==O0OO00000O000000O .getTxn ()#line:76
            print ("\r"+O0OO0O0OOO0000000 +"\033[0;;m signSignature & decryptSignature functions are working as expected.")#line:77
        except AssertionError :#line:78
            O0O0O0OOO0000OO00 +=1 #line:79
            print ("\r"+O00OO00OO000O0000 +"\033[0;;m Result of Signature decryption doesn't match the original message's hash.\n" "Incorrect implementation of Signature function may cause problems in test cases below.\n" "Autograder will continue to run.")#line:82
        except Exception as OOOOO00OOO00OO0O0 :#line:83
            print ("\r"+OOOOOOO000OO0OO00 +"\033[0;;m Unexpected Exception is raised when signSignature & decryptSignature is called.\n" "Autograder Terminated")#line:85
            raise OOOOO00OOO00OO0O0 #line:86
        print ("Test Case 2. Creating Simple Transactions between Users")#line:92
        try :#line:93
            for OOO00OOOOOO00OO0O in O00OO0OO0OOO0O00O :#line:94
                OOO0O000OO0OO0O0O =Transaction (OO00O0O0O00OOOO0O ,50 ,(0 ,0 ),(0 ,0 ),OO00OOO0O00O0OOOO [OOO00OOOOOO00OO0O ][1 ],isCoinBase =True )#line:95
                OO00O0O0O00OOOO0O .addTransaction (OOO0O000OO0OO0O0O )#line:96
            if len (OO00O0O0O00OOOO0O )!=len (O00OO0OO0OOO0O00O ):#line:98
                O0O0O0OOO0000OO00 +=1 #line:99
                print (O00OO00OO000O0000 +"\033[0;;m Some (All) of the Transactions from COINBASE failed to add into the ledger. " "This may cause by improper validation in Ledger.addTransaction. \nAutograder will " "continue to run.")#line:103
            else :#line:104
                print (O0OO0O0OOO0000000 +"\033[0;;m Transaction from COINBASE is accepted.")#line:105
        except Exception as OOOOO00OOO00OO0O0 :#line:106
            print (OOOOOOO000OO0OO00 +"\033[0;;m Exception raised when adding transactions from COINBASE to the ledger. " "Autograder Terminated.\n" "Detailed Exception is raised Above.")#line:109
            raise OOOOO00OOO00OO0O0 #line:110
        try :#line:116
            print (O0OO00000O0OOOO0O +"\033[0;;m Creating Transactions between people ...",end ="",flush =True )#line:117
            OOO0O000OO0OO0O0O =Transaction (OO00O0O0O00OOOO0O ,40 ,OO00OOO0O00O0OOOO ["A"][1 ],OO00OOO0O00O0OOOO ["A"][0 ],OO00OOO0O00O0OOOO ["B"][1 ])#line:119
            OO00O0O0O00OOOO0O .addTransaction (OOO0O000OO0OO0O0O )#line:120
            OOO0O000OO0OO0O0O =Transaction (OO00O0O0O00OOOO0O ,10 ,OO00OOO0O00O0OOOO ["B"][1 ],OO00OOO0O00O0OOOO ["B"][0 ],OO00OOO0O00O0OOOO ["C"][1 ])#line:123
            OO00O0O0O00OOOO0O .addTransaction (OOO0O000OO0OO0O0O )#line:124
            OOO0O000OO0OO0O0O =Transaction (OO00O0O0O00OOOO0O ,30 ,OO00OOO0O00O0OOOO ["C"][1 ],OO00OOO0O00O0OOOO ["C"][0 ],OO00OOO0O00O0OOOO ["A"][1 ])#line:127
            OO00O0O0O00OOOO0O .addTransaction (OOO0O000OO0OO0O0O )#line:128
            OOO0O000OO0OO0O0O =Transaction (OO00O0O0O00OOOO0O ,20 ,OO00OOO0O00O0OOOO ["B"][1 ],OO00OOO0O00O0OOOO ["B"][0 ],OO00OOO0O00O0OOOO ["D"][1 ])#line:131
            OO00O0O0O00OOOO0O .addTransaction (OOO0O000OO0OO0O0O )#line:132
            assert len (set (OO00O0O0O00OOOO0O .getBalanceStat ().values ())-{40 ,60 ,30 ,70 ,50 })==0 #line:134
            print ("\r"+O0OO0O0OOO0000000 +"\033[0;;m Basic Transaction between Peoples are processed correctly.")#line:135
        except Exception as OOOOO00OOO00OO0O0 :#line:136
            print ("\r"+OOOOOOO000OO0OO00 +"\033[0;;m The valid transactions between people are blocked by the ledger. Autograder Terminated.\n" "Detailed Exceptions is raised.")#line:138
            raise OOOOO00OOO00OO0O0 #line:139
        print ("Test Case 3. Malicious Transaction Test")#line:145
        try :#line:149
            print (O0OO00000O0OOOO0O +"\033[0;;m Creating a Malicious Transaction A --- [10 x] 20 ---> B ...",end ="",flush =True )#line:150
            OOO0O000OO0OO0O0O =Transaction (OO00O0O0O00OOOO0O ,10 ,OO00OOO0O00O0OOOO ["A"][1 ],OO00OOO0O00O0OOOO ["A"][0 ],OO00OOO0O00O0OOOO ["B"][1 ])#line:151
            for OOOO000O0O0O0O0OO in range (len (OOO0O000OO0OO0O0O .outTransaction )):#line:152
                if OOO0O000OO0OO0O0O .outTransaction [OOOO000O0O0O0O0OO ][0 ]==10 :#line:153
                    OOO0O000OO0OO0O0O .outTransaction [OOOO000O0O0O0O0OO ][0 ]=20 #line:154
            OO00O0O0O00OOOO0O .addTransaction (OOO0O000OO0OO0O0O )#line:155
            O0O0O0OOO0000OO00 +=1 #line:156
            print ("\r"+O00OO00OO000O0000 +"\033[0;;m Ledger accept the invalid transaction OR didn't raise any exception for an " "invalid input. Check your implementation on addTransaction(...). " "Remember to raise TransactionNotBalanceError when the input transaction is not balanced.\n" "Autograder will continue to run.")#line:160
        except TranactionNotBalanceError :#line:161
            print ("\r"+O0OO0O0OOO0000000 +"\033[0;;m Ledger detect the modified Transaction and raise TransactionNotBalanceError as expected.")#line:162
        except BlockchainError as OOOOO00OOO00OO0O0 :#line:163
            O0O0O0OOO0000OO00 +=1 #line:164
            print ("\r"+O00OO00OO000O0000 +"\033[0;;m Ledger detect the modified Transaction but raise {} instead of TransactionNotBalanceError.".format (type (OOOOO00OOO00OO0O0 )))#line:165
        except Exception as OOOOO00OOO00OO0O0 :#line:166
            print ("\r"+OOOOOOO000OO0OO00 +"\033[0;;m When we are trying to add a malicious modified transaction into the ledger, " "Unexpected Exception is raised. Check whether your program raise the " "TransactionNotBalanceError or other exceptions.\n" "Autograder Terminated.\n" "Detailed Exception is raised.")#line:171
            raise OOOOO00OOO00OO0O0 #line:172
        try :#line:176
            print (O0OO00000O0OOOO0O +"\033[0;;m Creating a Malicious Transaction A(E) - - - 20 ---> B ...",end ="",flush =True )#line:177
            OOO0O000OO0OO0O0O =Transaction (OO00O0O0O00OOOO0O ,10 ,OO00OOO0O00O0OOOO ["E"][1 ],OO00OOO0O00O0OOOO ["A"][0 ],OO00OOO0O00O0OOOO ["B"][1 ])#line:178
            OO00O0O0O00OOOO0O .addTransaction (OOO0O000OO0OO0O0O )#line:179
            O0O0O0OOO0000OO00 +=1 #line:180
            print ("\r"+O00OO00OO000O0000 +"\033[0;;m Ledger accept the invalid transaction that use E's money as input " "but created by A.\n" "Autograder will continue to run.")#line:183
        except TransactionSignatureError :#line:184
            print ("\r"+O0OO0O0OOO0000000 +"\033[0;;m Ledger detect the signature created by A is invalid and raise TransactionSignatureError as expected.")#line:185
        except BlockchainError as OOOOO00OOO00OO0O0 :#line:186
            O0O0O0OOO0000OO00 +=1 #line:187
            print ("\r"+O00OO00OO000O0000 +"\033[0;;m Ledger detect the modified Transaction but raise {} instead of TransactionSignatureError.".format (type (OOOOO00OOO00OO0O0 )))#line:188
        except Exception as OOOOO00OOO00OO0O0 :#line:189
            print ("\r"+OOOOOOO000OO0OO00 +"\033[0;;m When we are trying to add a malicious modified transaction into the ledger, " "Unexpected Exception is raised. Check whether your program raise the " "TransactionSignatureError or other exceptions.\n" "Autograder Terminated.\n" "Detailed Exception is raised.")#line:194
            raise OOOOO00OOO00OO0O0 #line:195
        try :#line:199
            print (O0OO00000O0OOOO0O +"\033[0;;m Creating a Malicious Transaction A --- 20 + [create from nowhere] 10 ---> B ...",end ="",flush =True )#line:200
            OOO0O000OO0OO0O0O =Transaction (OO00O0O0O00OOOO0O ,10 ,OO00OOO0O00O0OOOO ["A"][1 ],OO00OOO0O00O0OOOO ["A"][0 ],OO00OOO0O00O0OOOO ["B"][1 ])#line:201
            OOO0O000OO0OO0O0O .addInputTransaction (11090429 ,0 ,(2003 ,2002 ,2000 ,1999 ))#line:202
            OO00O0O0O00OOOO0O .addTransaction (OOO0O000OO0OO0O0O )#line:203
            O0O0O0OOO0000OO00 +=1 #line:204
            print ("\r"+O00OO00OO000O0000 +"\033[0;;m Ledger accept the invalid transaction that use a fake (and not-exist) " "inTransaction entry created by A.\n" "Autograder will continue to run.")#line:207
        except TransactionInNotExist :#line:208
            print ("\r"+O0OO0O0OOO0000000 +"\033[0;;m Ledger detect that the input transaction of the new transaction is invalid" " and raise TransactionInNotExist as expected.")#line:210
        except BlockchainError as OOOOO00OOO00OO0O0 :#line:211
            O0O0O0OOO0000OO00 +=1 #line:212
            print ("\r"+O00OO00OO000O0000 +"\033[0;;m Ledger detect the modified Transaction but raise {} instead of TransactionInNotExist.".format (type (OOOOO00OOO00OO0O0 )))#line:213
        except Exception as OOOOO00OOO00OO0O0 :#line:214
            print ("\r"+OOOOOOO000OO0OO00 +"\033[0;;m When we are trying to add a malicious modified transaction into the ledger, " "Unexpected Exception is raised. Check whether your program raise the " "TransactionInNotExist or other exceptions.\n" "Autograder Terminated.\n" "Detailed Exception is raised.")#line:219
            raise OOOOO00OOO00OO0O0 #line:220
        try :#line:224
            assert len (set (OO00O0O0O00OOOO0O .getBalanceStat ().values ())-{40 ,60 ,30 ,70 ,50 })==0 #line:225
            print (O0OO0O0OOO0000000 +"\033[0;;m Attempt to add invalid transactions does NOT change the balance in ledger.")#line:226
        except AssertionError as OOOOO00OOO00OO0O0 :#line:227
            O0O0O0OOO0000OO00 +=1 #line:228
            print (O00OO00OO000O0000 +"\033[0;;m Adding invalid transactions into the ledger cause the ledger balance change.\n" "Probably because - 1. The invalid transaction in previous test case is accepted by the ledger\n" "2. The sequence to modify the 'isUsed' state in ledger and validate input transaction is incorrect.\n" "Autograder will continue to run.")#line:232
        except Exception as OOOOO00OOO00OO0O0 :#line:233
            print (OOOOOOO000OO0OO00 +"\033[0;;m Fail to check balance of ledger after attempt to add invalid transactions into the ledger. Detailed exceptions are raised.\n" "Autograder terminated.")#line:235
            raise OOOOO00OOO00OO0O0 #line:236
        print ("Test Case 4. Block Test")#line:238
        OO0000000O00O0O00 =5 #line:240
        for _O00O00OO00OOOOOO0 in range (2 ):#line:243
            for OOO00OOOOOO00OO0O in O00OO0OO0OOO0O00O :#line:244
                OOO0O000OO0OO0O0O =Transaction (OO00O0O0O00OOOO0O ,25 ,(0 ,0 ),(0 ,0 ),OO00OOO0O00O0OOOO [OOO00OOOOOO00OO0O ][1 ],isCoinBase =True )#line:245
                OO00O0O0O00OOOO0O .addTransaction (OOO0O000OO0OO0O0O )#line:246
        print (O0OO00000O0OOOO0O +"\033[0;;m Creating a trivial block with difficulty = {}...".format (OO0000000O00O0O00 ),end ="")#line:249
        try :#line:250
            OO0000OOOO0O0OO00 =[OO00O0O0O00OOOO0O [OOOO0O0O00OO000O0 ]for OOOO0O0O00OO000O0 in OO00O0O0O00OOOO0O ]#line:251
            OO0000OOOO0O0OO00 =OO0000OOOO0O0OO00 [:16 ]#line:252
            OOOOO0OOO00OO0O00 =Block ("f"*64 ,OO0000000O00O0O00 ,0 ,OO0000OOOO0O0OO00 )#line:253
            print ("\r"+O0OO0O0OOO0000000 +"\033[0;;m Create a single block successfully")#line:254
        except Exception as OOOOO00OOO00OO0O0 :#line:255
            print ("\r"+OOOOOOO000OO0OO00 +"\033[0;;m Failed to create a new block.\nAutograder Terminated.")#line:256
            raise OOOOO00OOO00OO0O0 #line:257
        try :#line:260
            O000OOOOO0OO00O00 =util .hashObject (OOOOO0OOO00OO0O00 )#line:261
            if O000OOOOO0OO00O00 [:OO0000000O00O0O00 ]=="0"*OO0000000O00O0O00 :#line:262
                print (O0OO0O0OOO0000000 +"\033[0;;m The created block pass the Difficulty Test with Hash value {}".format (O000OOOOO0OO00O00 ))#line:263
        except NameError :#line:264
            O0O0O0OOO0000OO00 +=1 #line:265
            print (O00OO00OO000O0000 +"\033[0;;m Since the Block is not created in prev case, Autograder will skip this case.\n" "Autograder Continue to Run.")#line:267
        except Exception as OOOOO00OOO00OO0O0 :#line:268
            print (OOOOOOO000OO0OO00 +"\033[0;;m Unexpected Exception Raised. \nAutograder Terminated.")#line:269
            raise OOOOO00OOO00OO0O0 #line:270
        try :#line:273
            OOO00000000O0O0O0 =MerkelTree (["tx1","tx2","tx3","tx4","tx5","tx6","tx7","tx8"])#line:274
            assert OOO00000000O0O0O0 .root =='a0e4f2fc684c076060cb332359794de449eca07b281fc6b2da02e76e9f9ca6db'#line:276
            print (O0OO0O0OOO0000000 +"\033[0;;m Merkel Tree Root is correct.")#line:277
        except AssertionError :#line:278
            O0O0O0OOO0000OO00 +=1 #line:279
            print (O00OO00OO000O0000 +"\033[0;;m Merkel Tree Root is calculated without exception, but is different from expected result.\n" "Your Merkel Tree root is {}\nAutograder will continue to run.".format (OOO00000000O0O0O0 .root ))#line:281
        except Exception as OOOOO00OOO00OO0O0 :#line:282
            print (OOOOOOO000OO0OO00 +"\033[0;;m Unexpected Exception Raised. \nAutograder Terminated.")#line:283
            raise OOOOO00OOO00OO0O0 #line:284
        print ("\n--------- Autograder Terminated without Exception -----------")#line:288
        if O0O0O0OOO0000OO00 ==0 :#line:290
            print ("\n\n\033[32mCongratulation! You passed All the tests with 0 Warning and 0 Error.\033[0;;m \n\n")#line:291
        else :#line:292
            print ("\n\n\033[33mThough the implementation does NOT have FATAL ERROR, there is (are) {} Warning(s). " "Running through the autograder does NOT mean your implementation is correct since there are Warnings." "You should debug on your implementation to solve all Warnings. File Ledger.txt is exported in the working directory to help you debug.\033[0;;m \n\n".format (O0O0O0OOO0000OO00 ))#line:295
        if (input ("Press 'y' if you want to export the Ledger in Ledger.txt file: ").lower ()=="y"):#line:297
            OO00O0O0O00OOOO0O .exportFile ()#line:298
if __name__ =='__main__':#line:300
    test =AutoGrader ()#line:301
    test .run ()#line:302

"""
code = base64.b64decode(Secret).decode("ascii")
# print(code)
eval(compile(code,'<string>','exec'))